{
	"info": {
		"_postman_id": "b0d69e6f-5896-4a07-a042-460fbc7c9f97",
		"name": "chenm7-Project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30549678"
	},
	"item": [
		{
			"name": "reset DB except users before run",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/reset",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"reset"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check jwt1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code: jwt1 okay\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "HEAD",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer ya29.a0AfB_byAOW9lyGpXZ8k6XFIwjL7blYIzqgdSqk5TdC_eWuH_jGIwfT1bDbsotUYJ0KXdLvpaWY-BzyRfsmv_SGvtY8aNDMlU-tDGMnjyItY_9EC29Ed4WMUAaohXgpUm2HnoL8dLJ0W9DwsefzX-kbBBKhNJEUIHBBsVJaCgYKAcgSARISFQHGX2Mi8CSRITjHs9JftYHVnlHdmg0171",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/checkjwt",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"checkjwt"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check jwt2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code: jwt2 okay\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "HEAD",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer ya29.a0AfB_byAOW9lyGpXZ8k6XFIwjL7blYIzqgdSqk5TdC_eWuH_jGIwfT1bDbsotUYJ0KXdLvpaWY-BzyRfsmv_SGvtY8aNDMlU-tDGMnjyItY_9EC29Ed4WMUAaohXgpUm2HnoL8dLJ0W9DwsefzX-kbBBKhNJEUIHBBsVJaCgYKAcgSARISFQHGX2Mi8CSRITjHs9JftYHVnlHdmg0171",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/checkjwt",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"checkjwt"
					]
				}
			},
			"response": []
		},
		{
			"name": "200 get users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/users",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "201 add boat1 with jwt1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set boat id environment variable from response",
							"pm.environment.set(\"boat_id1\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Sea Witch\");",
							"   pm.expect(pm.response.json()[\"type\"]).to.eq(\"Catamaran\");",
							"   pm.expect(pm.response.json()[\"length\"]).to.eq(28);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Sea Witch\",\n    \"type\": \"Catamaran\",\n    \"length\": 28\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "400 add boat without attributes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Sea Witch\",\n    \"type\": \"Catamaran\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "406 add boat without accept json",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"application/json response only\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "text/html",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Sea Witch\",\n    \"type\": \"Catamaran\",\n    \"length\": 28\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "401 add boat missing jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"code\"]).to.eq(\"no auth header\");",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Authorization header is missing\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Sea Witch\",\n    \"type\": \"Catamaran\",\n    \"length\": 28,\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "200 get boats with jwt1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"boats\"][0][\"name\"]).to.eq(\"Sea Witch\");",
							"   pm.expect(pm.response.json()[\"boats\"][0][\"type\"]).to.eq(\"Catamaran\");",
							"   pm.expect(pm.response.json()[\"boats\"][0][\"length\"]).to.eq(28);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"boats\"][0][\"id\"];",
							"   pm.expect(pm.response.json()[\"boats\"][0][\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "401 get boats missing jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"code\"]).to.eq(\"no auth header\");",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Authorization header is missing\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "200 get boats other jwt2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"boats\"]).to.be.an('array').that.is.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "405 delete all the boats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"405 status code\", function () {",
							"    pm.response.to.have.status(405);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "401 get boat no jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"code\"]).to.eq(\"no auth header\");",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Authorization header is missing\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "403 put boat no jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"code\"]).to.eq(\"no auth header\");",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Authorization header is missing\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Sea Witch\",\n    \"type\": \"Catamaran\",\n    \"length\": 29\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "403 patch boat no jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"code\"]).to.eq(\"no auth header\");",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Authorization header is missing\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Sea Witch 2\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "403 get boat wrong jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Boat is owned by someone else.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "403 put boat wrong jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Boat is owned by someone else.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Sea Witch\",\n    \"type\": \"Catamaran\",\n    \"length\": 29\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "403 patch boat wrong jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Boat is owned by someone else.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Sea Witch 2\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "200 get boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Sea Witch\");",
							"   pm.expect(pm.response.json()[\"type\"]).to.eq(\"Catamaran\");",
							"   pm.expect(pm.response.json()[\"length\"]).to.eq(28);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "200 put boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Sea Witch 0\");",
							"   pm.expect(pm.response.json()[\"type\"]).to.eq(\"Catamaran\");",
							"   pm.expect(pm.response.json()[\"length\"]).to.eq(29);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Sea Witch 0\",\n    \"type\": \"Catamaran\",\n    \"length\": 29\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "400 put boat missing attr",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Sea Witch -1\",\n    \"type\": \"Catamaran\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "200 patch boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Sea Witch 2\");",
							"   pm.expect(pm.response.json()[\"type\"]).to.eq(\"Catamaran\");",
							"   pm.expect(pm.response.json()[\"length\"]).to.eq(29);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Sea Witch 2\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "400 patch boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name_fake\": \"Sea Witch 5\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "406",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"application/json response only\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "text/html",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Sea Witch\",\n    \"type\": \"Catamaran\",\n    \"length\": 28\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "406",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"application/json response only\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "text/html",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Sea Witch\",\n    \"type\": \"Catamaran\",\n    \"length\": 28\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "406",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"application/json response only\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "text/html",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "200 get boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Sea Witch 2\");",
							"   pm.expect(pm.response.json()[\"type\"]).to.eq(\"Catamaran\");",
							"   pm.expect(pm.response.json()[\"length\"]).to.eq(29);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "403 delete boat wrong jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Boat is owned by someone else.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "204 delete boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "404 get boat DNE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "404 delete boat DNE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "404 boat DNE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Sea Witch\",\n    \"type\": \"Catamaran\",\n    \"length\": 28\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "404 boat DNE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Sea Witch\",\n    \"type\": \"Catamaran\",\n    \"length\": 28\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "201 add slip",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set boat id environment variable from response",
							"pm.environment.set(\"slip_id1\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"harbor\"]).to.eq(\"Bar Harbor\");",
							"   pm.expect(pm.response.json()[\"depth\"]).to.eq(50);",
							"   pm.expect(pm.response.json()[\"rate\"]).to.eq(100);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/slips/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"harbor\": \"Bar Harbor\",\n    \"depth\": 50,\n    \"rate\": 100\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/slips",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips"
					]
				}
			},
			"response": []
		},
		{
			"name": "201 add slip missing attr",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"harbor\": \"Bar Harbor\",\n    \"depth\": 50\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/slips",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips"
					]
				}
			},
			"response": []
		},
		{
			"name": "406 add slip no accept json",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"application/json response only\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "text/html",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"harbor\": \"Bar Harbor\",\n    \"depth\": 50,\n    \"rate\": 100\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/slips",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips"
					]
				}
			},
			"response": []
		},
		{
			"name": "200 get slips",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"slips\"][0][\"harbor\"]).to.eq(\"Bar Harbor\");",
							"   pm.expect(pm.response.json()[\"next\"]).to.be.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/slips",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips"
					]
				}
			},
			"response": []
		},
		{
			"name": "200 get slip",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"harbor\"]).to.eq(\"Bar Harbor\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "406 get slip no accept json",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"application/json response only\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html"
					}
				],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "406",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"application/json response only\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html"
					}
				],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "406",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"application/json response only\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html"
					}
				],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "200 put slip",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"harbor\"]).to.eq(\"Bar Harbor 2\");",
							"   pm.expect(pm.response.json()[\"depth\"]).to.eq(51);",
							"   pm.expect(pm.response.json()[\"rate\"]).to.eq(100);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/slips/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"harbor\": \"Bar Harbor 2\",\n    \"depth\": 51,\n    \"rate\": 100\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "400 put slip missing attr",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"harbor\": \"Bar Harbor 3\",\n    \"depth\": 51\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "200 patch slip",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"harbor\"]).to.eq(\"Bar Harbor\");",
							"   pm.expect(pm.response.json()[\"depth\"]).to.eq(51);",
							"   pm.expect(pm.response.json()[\"rate\"]).to.eq(100);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/slips/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"harbor\": \"Bar Harbor\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "400 patch slip no attr",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"harbor_fake\": \"Bar Harbor\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "200 get slip",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"harbor\"]).to.eq(\"Bar Harbor\");",
							"   pm.expect(pm.response.json()[\"depth\"]).to.eq(51);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "204 delete slip",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "404 delete slip DNE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No slip with this slip_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "404 slip DNE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No slip with this slip_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"harbor\": \"Bar Harbor 2\",\n    \"depth\": 51,\n    \"rate\": 100\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "404 slip DNE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No slip with this slip_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"harbor\": \"Bar Harbor\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "404 slip DNE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No slip with this slip_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "201 add boat1 with jwt1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set boat id environment variable from response",
							"pm.environment.set(\"boat_id1\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Sea Witch\");",
							"   pm.expect(pm.response.json()[\"type\"]).to.eq(\"Catamaran\");",
							"   pm.expect(pm.response.json()[\"length\"]).to.eq(28);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Sea Witch\",\n    \"type\": \"Catamaran\",\n    \"length\": 28\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "201 add boat2 with jwt2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set boat id environment variable from response",
							"pm.environment.set(\"boat_id2\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Titanic\",\n    \"type\": \"Cruise Ship\",\n    \"length\": 1000\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "404 boat1 into slip DNE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No slip with this slip_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id1}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id1}}",
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "201 add slip1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set boat id environment variable from response",
							"pm.environment.set(\"slip_id1\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"harbor\"]).to.eq(\"Bar Harbor\");",
							"   pm.expect(pm.response.json()[\"depth\"]).to.eq(50);",
							"   pm.expect(pm.response.json()[\"rate\"]).to.eq(100);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/slips/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"harbor\": \"Bar Harbor\",\n    \"depth\": 50,\n    \"rate\": 100\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/slips",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips"
					]
				}
			},
			"response": []
		},
		{
			"name": "201 add slip2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set boat id environment variable from response",
							"pm.environment.set(\"slip_id2\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"harbor\"]).to.eq(\"Bar Harbor two\");",
							"   pm.expect(pm.response.json()[\"depth\"]).to.eq(50);",
							"   pm.expect(pm.response.json()[\"rate\"]).to.eq(100);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/slips/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"harbor\": \"Bar Harbor two\",\n    \"depth\": 50,\n    \"rate\": 100\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/slips",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips"
					]
				}
			},
			"response": []
		},
		{
			"name": "404 boat DNE into slip1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id1}}/boats/{{boat_id_fake}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id1}}",
						"boats",
						"{{boat_id_fake}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "401 boat1 into slip1 no jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"code\"]).to.eq(\"no auth header\");",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Authorization header is missing\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id1}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id1}}",
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "403 boat1 into slip1 wrong jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Boat is owned by someone else.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id1}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id1}}",
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "200 get boat1 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"slip\"]).to.eq(null);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "200 get slip1 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"boat\"]).to.eq(null);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "204 boat1 into slip1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id1}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id1}}",
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "403 boat2 into slip1 occupied",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The slip is not empty or boat is already at slip\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id1}}/boats/{{boat_id2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id1}}",
						"boats",
						"{{boat_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "404 wrong boat in slip1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id is at the slip with this slip_id\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id1}}/boats/{{boat_id2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id1}}",
						"boats",
						"{{boat_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "200 get boat1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"slip\"]['id']).to.eq(pm.environment.get(\"slip_id1\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "200 get slip1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"boat\"]['id']).to.eq(pm.environment.get(\"boat_id1\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "404 wrong jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Boat is owned by someone else.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"harbor\": \"Bar Harbor 2\",\n    \"depth\": 51,\n    \"rate\": 100\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id1}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id1}}",
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "204 boat into another slip",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"harbor\": \"Bar Harbor 2\",\n    \"depth\": 51,\n    \"rate\": 100\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id2}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id2}}",
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "200 get boat1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"slip\"]['id']).to.eq(pm.environment.get(\"slip_id2\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "200 get slip1 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"boat\"]).to.eq(null);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "200 get slip2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"boat\"]['id']).to.eq(pm.environment.get(\"boat_id1\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "204 boat from slip2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"harbor\": \"Bar Harbor 2\",\n    \"depth\": 51,\n    \"rate\": 100\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id2}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id2}}",
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "200 get slip2 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"boat\"]).to.eq(null);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "200 get boat1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"slip\"]).to.eq(null);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "204 boat1 into slip1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"harbor\": \"Bar Harbor 2\",\n    \"depth\": 51,\n    \"rate\": 100\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id1}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id1}}",
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "200 get boat1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "401 delete slip1 no jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"code\"]).to.eq(\"no auth header\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "403 delete slip1 wrong jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Slip has boat owned by someone else.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "401 put slip no jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"harbor\": \"Bar Harbor 2\",\n    \"depth\": 51,\n    \"rate\": 100\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "401 patch slip no jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"harbor\": \"Bar Harbor 2\",\n    \"depth\": 51,\n    \"rate\": 100\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "403 put slip wrong jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"harbor\": \"Bar Harbor 2\",\n    \"depth\": 51,\n    \"rate\": 100\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "403 put slip wrong jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"harbor\": \"Bar Harbor 2\",\n    \"depth\": 51,\n    \"rate\": 100\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "204 delete slip1 with boat1 in",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "200 get boat1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"slip\"]).to.eq(null);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "404 slip1 DNE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No slip with this slip_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/slips/{{slip_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips",
						"{{slip_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "201 add slip x5 + 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"harbor\"]).to.eq(\"Bar Harbor Not looped\");",
							"   pm.expect(pm.response.json()[\"depth\"]).to.eq(50);",
							"   pm.expect(pm.response.json()[\"rate\"]).to.eq(100);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/slips/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"",
							"for (let i = 0; i < 5; i++){",
							"    const postRequest = {",
							"        url:pm.environment.get(\"app_url\") + \"/slips\",",
							"        method:\"POST\",",
							"        body: {",
							"            mode: 'raw',",
							"            raw: JSON.stringify(",
							"                {",
							"                \"harbor\": \"Bar Harbor pages\",",
							"                \"depth\": 50,",
							"                \"rate\": 1 + i",
							"                }",
							"            )",
							"        },",
							"        header: {",
							"            \"Accept\":\"application/json\",",
							"            \"Content-Type\":\"application/json\"",
							"        }",
							"    };",
							"",
							"    pm.sendRequest(postRequest, (error, response) => {",
							"        let resp = response.code;",
							"        pm.test(\"201 created x5\", function() {",
							"            pm.expect(resp).to.equal(201)",
							"        });",
							"    }",
							"    );",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"harbor\": \"Bar Harbor Not looped\",\n    \"depth\": 50,\n    \"rate\": 100\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/slips",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips"
					]
				}
			},
			"response": []
		},
		{
			"name": "200 get slips pagination",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"next\"]).to.not.be.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/slips",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"slips"
					]
				}
			},
			"response": []
		},
		{
			"name": "201 add boats x5 + 1 Copy jwt2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Copy boats\");",
							"   pm.expect(pm.response.json()[\"type\"]).to.eq(\"Submarine\");",
							"   pm.expect(pm.response.json()[\"length\"]).to.eq(10);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"",
							"for (let i = 0; i < 5; i++){",
							"    const postRequest = {",
							"        url:pm.environment.get(\"app_url\") + \"/boats\",",
							"        method:\"POST\",",
							"        body: {",
							"            mode: 'raw',",
							"            raw: JSON.stringify(",
							"                {",
							"                    \"name\": \"Copy boats\",",
							"                    \"type\": \"Submarine\",",
							"                    \"length\": 10 + i",
							"                }",
							"            )",
							"        },",
							"        header: {",
							"            \"Accept\":\"application/json\",",
							"            \"Content-Type\":\"application/json\",",
							"            \"Authorization\": \"Bearer \" + pm.environment.get(\"jwt2\")",
							"        }",
							"    };",
							"",
							"    pm.sendRequest(postRequest, (error, response) => {",
							"        let resp = response.code;",
							"        pm.test(\"201 created x5\", function() {",
							"            pm.expect(resp).to.equal(201)",
							"        });",
							"    }",
							"    );",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Copy boats\",\n    \"type\": \"Submarine\",\n    \"length\": 10\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "200 get boats jwt2 pagination",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eq(\"application/json\")",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"next\"]).to.not.be.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "reset DB Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/reset",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"reset"
					]
				}
			},
			"response": []
		}
	]
}